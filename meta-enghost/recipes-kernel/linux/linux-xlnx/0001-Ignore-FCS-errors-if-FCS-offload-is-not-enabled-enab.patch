From 3f4e32aed5f5d2337829ead083cb88854f9ba642 Mon Sep 17 00:00:00 2001
From: Liam Pribis <liam.pribis@digiconsoles.com>
Date: Mon, 16 Dec 2024 14:51:41 +0000
Subject: [PATCH] Ignore FCS errors if FCS offload is not enabled, enable debug

---
 drivers/net/ethernet/cadence/macb.h      |  2 ++
 drivers/net/ethernet/cadence/macb_main.c | 15 +++++++++++++++
 2 files changed, 17 insertions(+)

diff --git a/drivers/net/ethernet/cadence/macb.h b/drivers/net/ethernet/cadence/macb.h
index 5bdffefb54b2..2f876c5473c5 100644
--- a/drivers/net/ethernet/cadence/macb.h
+++ b/drivers/net/ethernet/cadence/macb.h
@@ -312,6 +312,8 @@
 #define GEM_DBW_SIZE		2
 #define GEM_RXCOEN_OFFSET	24
 #define GEM_RXCOEN_SIZE		1
+#define GEM_FCSIGNORE_OFFSET	26 /* ignore RX FCS */
+#define GEM_FCSIGNORE_SIZE	1
 #define GEM_SGMIIEN_OFFSET	27
 #define GEM_SGMIIEN_SIZE	1
 
diff --git a/drivers/net/ethernet/cadence/macb_main.c b/drivers/net/ethernet/cadence/macb_main.c
index dfe3828c8d9b..1bc6f044f971 100644
--- a/drivers/net/ethernet/cadence/macb_main.c
+++ b/drivers/net/ethernet/cadence/macb_main.c
@@ -42,6 +42,10 @@
 #include <linux/firmware/xlnx-zynqmp.h>
 #include "macb.h"
 
+
+#define DEBUG
+#define VERBOSE_DEBUG
+
 /* This structure is only used for MACB on SiFive FU540 devices */
 struct sifive_fu540_macb_mgmt {
 	void __iomem *reg;
@@ -2704,7 +2708,15 @@ static void macb_init_hw(struct macb *bp)
 
 	/* Do not discard Rx FCS if RX checsum offload disabled */
 	if (bp->dev->features & NETIF_F_RXCSUM)
+	{
 		config |= MACB_BIT(DRFCS);		/* Discard Rx FCS */
+	}
+	else
+	{
+		/* Checksum offload disabled */
+		config |= GEM_BIT(FCSIGNORE);
+		printk(KERN_INFO "Checksum offload disabled, enabling FCS INGNORE");
+	}
 
 	if (bp->caps & MACB_CAPS_JUMBO)
 		config |= MACB_BIT(JFRAME);	/* Enable jumbo frames */
@@ -2717,6 +2729,9 @@ static void macb_init_hw(struct macb *bp)
 	if (!(bp->dev->flags & IFF_BROADCAST))
 		config |= MACB_BIT(NBC);	/* No BroadCast */
 	config |= macb_dbw(bp);
+#if defined(DEBUG) && defined(VERBOSE_DEBUG)
+	printk(KERN_DEBUG "MACB NETCFGR: %u", config);
+#endif
 	macb_writel(bp, NCFGR, config);
 	if ((bp->caps & MACB_CAPS_JUMBO) && bp->jumbo_max_len)
 		gem_writel(bp, JML, bp->jumbo_max_len);

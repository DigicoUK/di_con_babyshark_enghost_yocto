#!/bin/sh

set -eu

DEVICE_OPTIONS="sharc1|sharc2|sharc3|fpga1|fpga2|fpga3|xmos|enghost|enghost_backup|bootloader|bootloader_backup|dante|macaddress"

# Constant paths
# --------------------------------------------------------------------------------

# We should not have any other SD block devices on this system. Always assume sda1
USB_STORAGE_BLOCKDEV="/dev/sda1"
USB_STORAGE_MOUNTPOINT="/mnt/usbstorage"
RAMFS_BASE="/home/root"

PERSISTENT_FIRMWARE_DIR="/enginefirmware"

IMMUTABLE_DIR="/immutable"

FPGA_FLASH_DT_OVERLAY="/usr/lib/engine-updater/external-fpga-flash.dtbo"
FPGA_FLASH_DT_OVERLAY_CONFIGFS="/config/device-tree/overlays/fpga-flash"
FPGA_FLASH_MTD="/dev/mtdpart_externalfpgaflash"

# Arg parsing
# --------------------------------------------------------------------------------
if [ "$#" -lt 2 ]; then
    echo "Usage: update usb|ramfs $DEVICE_OPTIONS"
    echo "       update custom $DEVICE_OPTIONS filename"
    exit 0
fi

update_source="$1"
update_device="$2"


# Default filename selection
# --------------------------------------------------------------------------------
case "$update_device" in
    sharc1)
        canonical_basename="sharc1.bin"
        ;;
    sharc2)
        canonical_basename="sharc2.bin"
        ;;
    sharc3)
        canonical_basename="sharc3.bin"
        ;;
    fpga1)
        canonical_basename="FPGA1.bit"
        ;;
    fpga2)
        canonical_basename="FPGA2.bit"
        ;;
    fpga3)
        canonical_basename="FPGA3.bit"
        ;;
    xmos)
        canonical_basename="xmos.bin"
        ;;
    enghost)
        canonical_basename="fitImage"
        ;;
    enghost_backup)
        canonical_basename="fitImageBackup"
        ;;
    bootloader)
        canonical_basename="boot.bin"
        ;;
    bootloader_backup)
        canonical_basename="boot_backup.bin"
        ;;
    dante)
        echo "Not implemented"
        exit 1
        ;;
    macaddress)
        canonical_basename="macaddress"
        ;;
    *)
        echo "device: $DEVICE_OPTIONS"
        exit 1
        ;;
esac

# Prepare update file source location
# --------------------------------------------------------------------------------
if [ "$update_source" = "custom" ]; then
    # for custom, allow user to specify full path to file
    if [ "$#" -ne 3 ]; then
        echo "Usage: update custom $DEVICE_OPTIONS filename"
        exit 0
    fi
    source_file="$3"
else
    # for non-custom, look for the canonical basename in either the usb or ramfs base dir
    case "$update_source" in
        usb)
            if mountpoint -q "$USB_STORAGE_MOUNTPOINT"; then
                echo "USB already mounted"
            else
                # mount USB
                if [ ! -b "$USB_STORAGE_BLOCKDEV" ]; then
                    echo "USB block device $USB_STORAGE_BLOCKDEV not found"
                    exit 1
                fi
                mkdir -p "$USB_STORAGE_MOUNTPOINT"
                if ! mount "$USB_STORAGE_BLOCKDEV" "$USB_STORAGE_MOUNTPOINT"; then
                    echo "Failed to mount $USB_STORAGE_BLOCKDEV $USB_STORAGE_MOUNTPOINT"
                    exit 1
                fi
            fi
            source_base="$USB_STORAGE_MOUNTPOINT"
            ;;
        ramfs)
            source_base="$RAMFS_BASE"
            ;;
        *)
            echo "source: usb|ramfs|custom"
            exit 1
            ;;
    esac

    source_file="$source_base/$canonical_basename"
fi

if [ ! -f "$source_file" ]; then
    echo "$source_file does not exist"
    exit 1
fi

# Updater routines
# --------------------------------------------------------------------------------

# Copies to persistent firmware dir (applies to sharc, xmos, maybe dante)
# Requires $source_file, $canonical_basename
copy_to_persistent_dir() {
    if [ ! -d "$PERSISTENT_FIRMWARE_DIR" ]; then
        echo "$PERSISTENT_FIRMWARE_DIR does not exist"
        exit 1
    fi
    if ! mountpoint -q "$PERSISTENT_FIRMWARE_DIR"; then
        echo "Sanity check: $PERSISTENT_FIRMWARE_DIR is not a mountpoint, filesystem is probably not mounted properly"
        exit 1
    fi
    cp -f "$source_file" "$PERSISTENT_FIRMWARE_DIR/$canonical_basename"
    echo "Copied $source_file to persistent firmware"
}

# `update_sharc chipselect_idx`
# Requires $source_file. Copies firmware to flash and then re-programs sharc
update_sharc() {
    copy_to_persistent_dir
    zero_indexed=$(( "$1" - 1 ))
    sharc-booter "$source_file" "$zero_indexed"
}

# `mux_spi en0 en1 en2 sel_ab`
# Starts gpio holding daemon to mux spi
mux_spi() {
    if [ -n "${mux_spi_pid:-}" ]; then
        echo "mux already claimed"
        exit 1
    fi
    # TODO: daemonize and record pid
    gpioset "fpga_spi_en0=$1" "fpga_spi_en1=$2" "fpga_spi_en2=$3" "fpga_spi_sel=$4" & mux_spi_pid=$!
}

# Kills gpio holding daemon to release spi mux
unmux_spi() {
    if [ -n "${mux_spi_pid:-}" ]; then
        kill "$mux_spi_pid"
    else
        echo "Attempt to unmux spi before it was muxed"
    fi
}

# `update_external_fpga spimux_en_0 spimux_en_1 spimux_en_2 spi_sel_ab flash_access_gpio init_b_gpio prog_b_gpio`
# This applies to fpga 2, 3 (and 4, 5 which don't exist)
# Set up spi muxing, use device tree overlay to instantiate a flash driver, flashcp, cleanup
update_external_fpga() {
    # mux spi
    flash_access="$5"
    init_b="$6"
    prog_b="$7"

    # NOTE: need relatively long sleeps here, since the gpiochip is a slow i2c
    # expander and the driver will complain if we write to it while it's busy
    I2C_GPIO_SLEEP_TIME="0.5"

    # reset fpga to take control of spi mem, enable tri-states
    gpioset "$flash_access=1" "$init_b=0" "$prog_b=0" & fpga_access_pid=$!
    sleep "$I2C_GPIO_SLEEP_TIME"
    mux_spi "$1" "$2" "$3" "$4"
    sleep "$I2C_GPIO_SLEEP_TIME"

    if [ -d "$FPGA_FLASH_DT_OVERLAY_CONFIGFS" ]; then
        echo "$FPGA_FLASH_DT_OVERLAY_CONFIGFS already exists, deleting"
        rmdir "$FPGA_FLASH_DT_OVERLAY_CONFIGFS"
    fi
    mkdir "$FPGA_FLASH_DT_OVERLAY_CONFIGFS"
    cat "$FPGA_FLASH_DT_OVERLAY" > "$FPGA_FLASH_DT_OVERLAY_CONFIGFS/dtbo"

    if [ -c "$FPGA_FLASH_MTD" ]; then
        flashcp "$source_file" "$FPGA_FLASH_MTD" -v
    else
        echo "FPGA flash is not a character device"
    fi

    rmdir "$FPGA_FLASH_DT_OVERLAY_CONFIGFS"

    unmux_spi
    sleep "$I2C_GPIO_SLEEP_TIME"

    kill $fpga_access_pid

    # Set to input to tri-state
    gpioget -b disabled "$flash_access"
    sleep "$I2C_GPIO_SLEEP_TIME"
    gpioget -b disabled "$prog_b"
    sleep "$I2C_GPIO_SLEEP_TIME"
    gpioget -b disabled "$init_b"
}

update_xmos() {
    echo "Not implemented"
}

# `copy_to_flash_raw mtd_partition_name`
copy_to_flash_raw() {
    if [ -c "$1" ]; then
        echo "Copy raw $source_file -> $1"
        flashcp "$source_file" "$1" -v
        echo "Reboot required"
    else
        echo "Could not get mtd device from partition $1"
    fi
}

update_mac_address() {
    if [ ! -d "$IMMUTABLE_DIR" ]; then
        echo "$IMMUTABLE_DIR does not exist"
        exit 1
    fi
    mount -o remount,rw "$IMMUTABLE_DIR"
    if ! mountpoint -q "$IMMUTABLE_DIR"; then
        echo "Sanity check: $IMMUTABLE_DIR is not a mountpoint, filesystem is probably not mounted properly"
        exit 1
    fi
    cp -f "$source_file" "$IMMUTABLE_DIR/$canonical_basename"
    mount -o remount,ro "$IMMUTABLE_DIR"
}

# Run update commands based on device to update
# --------------------------------------------------------------------------------
case "$update_device" in
    sharc1)
        update_sharc 1
        ;;
    sharc2)
        update_sharc 2
        ;;
    sharc3)
        update_sharc 3
        ;;
    fpga1)
        copy_to_flash_raw "/dev/mtdpart_fpga1bitstream"
        ;;
    fpga2)
        update_external_fpga 0 1 1 0 fpga2_flash_access fpga2_init_b_n fpga2_prog_b_n
        ;;
    fpga3)
        update_external_fpga 0 1 1 1 fpga3_flash_access fpga3_init_b_n fpga3_prog_b_n
        ;;
    xmos)
        update_xmos
        ;;
    enghost)
        copy_to_flash_raw "/dev/mtdpart_linuxmain"
        ;;
    enghost_backup)
        copy_to_flash_raw "/dev/mtdpart_linuxbackup"
        ;;
    bootloader)
        copy_to_flash_raw "/dev/mtdpart_ubootmain"
        ;;
    bootloader_backup)
        copy_to_flash_raw "/dev/mtdpart_ubootbackup"
        ;;
    dante)
        echo "Not implemented"
        exit 1
        ;;
    macaddress)
        update_mac_address
        ;;
esac
